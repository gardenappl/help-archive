#!/bin/sh

set -o errexit


# Sanitize string so it's usable as an argument
shell_quote() {
	# Escape single quotes
	escaped=$(echo "$1" | sed "s/'/'\"'\"'/g")

	case "$escaped" in
		'' )
			# Empty string
			;;
		*[![:alnum:]_\./~-]* )
			# Argument is not clean, needs quoting
			echo "'$escaped'"
			;;
		* )
			# Argument contains only safe characters
			echo "$escaped"
			;;
	esac
}

simplify_home() {
	echo "$1" | awk -v home="$HOME" '{ sub("^"home, "~"); print }'
}


options=ho:X:p:fdqscS
longopts=help,output-directory:,extract-to:,password:,force,force-overwrite,delete,quiet,force-skip,skip,command,simulate
parsed=$(getopt --options=$options --longoptions=$longopts --name "$0" -- "$@")
eval set -- "$parsed"


while true; do
	case "$1" in 
		-o | --output-directory | -X | --extract-to )
			# Get rid of trailing slash
			output_dir="${2%/}"
			shift 2
			;;
		-p | --password )
			password="$2"
			shift 2
			;;
		-f | --force-overwrite | --force )
			force=y
			shift
			;;
		-s | --force-skip | --skip )
			skip=y
			shift
			;;
		-d | --delete )
			delete=y
			shift
			;;
		-q | --quiet )
			quiet=y
			shift
			;;
		-c | --command | -S | --simulate )
			only_print_command=y
			shift
			;;
		-- )
			shift
			archive_path="$1"
			break
			;;
	esac
done

if [ -n "$force" ] && [ -n "$skip" ]; then
	>&2 echo "Error: can't --skip and --force-overwrite at the same time."
	exit 1
fi


# Helper function for tools like xzcat, bzcat
# If the path to archive contains slashes (e.g. 'dir/file.xz')
# then force outputting to current directory, as opposed to 'dir/file'
force_output_dir_to_current_dir() {
	if [ -z "$output_dir" ]; then
		case "$archive_path" in
			*/* )
				output_dir='.'
				;;
		esac
	fi
}


# We will manually replace ARCHIVE_PATH, etc with the needed arguments
# (with or without color formatting)

case "$archive_path" in
	*.zip )
		handle_delete_manually=y

		run="unzip"

		[ -n "$force" ] && run="$run -o"
		[ -n "$skip" ] && run="$run -n"
		[ -n "$quiet" ] && run="$run -q"
		
		# Handle password which starts with -
		case "$password" in
			'' )
				# No password
				;;
			-* )
				run="$run -PPASSWORD"
				;;
			* )
				run="$run -P PASSWORD"
				;;
		esac

		# Info-ZIP does not recognize --
		run="$run DOT_ARCHIVE_PATH"

		[ -n "$output_dir" ] && run="$run -d OUTPUT_DIR"
		;;
	*.rar )
		handle_delete_manually=y

		run="unrar x"

		[ -n "$force" ] && run="$run -o+"
		[ -n "$skip" ] && run="$run -o-" # Skips files but sometimes exits with an error anyway, sigh...
		[ -n "$quiet" ] && run="$run -idq"
		[ -n "$password" ] && run="$run -pPASSWORD"

		run="$run DOUBLE_DASH_ARCHIVE_PATH"

		# unrar always treats the last argument as the output dir,
		# but only if it has a trailing slash
		if [ -n "$output_dir" ]; then
			output_dir="$output_dir/"
			run="$run OUTPUT_DIR"
		fi
		;;
	*.tar | *.tar.* | *.tgz | *.tbz | *.txz | *.tlz | *.tzo )
		handle_delete_manually=y
		handle_output='mkdir'

		use_standard_tar=y
		use_standard_tar_stdin=n
		case "$archive_path" in
			*.tar.gz | *.tgz )
				[ -n "$quiet" ] && run="tar xzf" || run="tar xzvf"
				;;
			*.tar.bz | *.tbz )
				[ -n "$quiet" ] && run="tar xjf" || run="tar xjvf"
				;;
			*.tar.lrz )
				# Special case, not handled by GNU tar
				# BUG?: man lrzip says it does not override by default, but lrzuntar does?
				# BUG?: lrzuntar can't handle --long options
				# BUG?: can't specify password as arg
				if [ -n "$force" ]; then
					run="lrzuntar"
					[ -n "$quiet" ] && run="$run -q"
					[ -n "$output_dir" ] && run="$run -O OUTPUT_DIR"
					run="$run DOUBLE_DASH_ARCHIVE_PATH"
				
					use_standard_tar=n
				else
					if [ -n "$quiet" ]; then
						run="lrzcat --quiet DOUBLE_DASH_ARCHIVE_PATH | tar x"
					else
						run="lrzcat DOUBLE_DASH_ARCHIVE_PATH | tar xv"
					fi
					use_standard_tar_stdin=y
				fi
				;;
			* )
				[ -n "$quiet" ] && run="tar xf" || run="tar xvf"
				;;
		esac

		if [ "$use_standard_tar" = y ]; then
			# Handle archive path which starts with -
			# We put the --directory argument at the end, so we can't use --
			if [ "$use_standard_tar_stdin" = n ]; then
				run="$run DOT_ARCHIVE_PATH"
			fi

			[ -n "$skip" ] && run="$run --skip-old-files"
			[ -z "$skip" ] && [ -z "$force" ] && run="$run -k"
			[ -n "$output_dir" ] && run="$run --directory=OUTPUT_DIR"
		fi
		;;
	*.deb )
		handle_delete_manually=y
		handle_skip_manually=dir
		handle_force=always-skip

		run="dpkg-deb"
		[ -n "$quiet" ] && run="$run --extract" || run="$run --vextract"
		
		if [ -n "$skip" ]; then
			echo "Sorry, the --skip flag is not supported for deb." >&2
			exit 1
		fi
		if [ -z "$output_dir" ]; then
			if [ -z "$force" ]; then
				echo "Sorry, extracting .deb packages to working directory might overwrite files" >&2
				echo "Use --force or change --output-directory" >&2
				exit 1
			fi
			output_dir="."
		fi
		run="$run DOUBLE_DASH_ARCHIVE_PATH OUTPUT_DIR"
		;;
	?*.bz2 | ?*.bz | ?*.gz | ?*.xz | ?*.lzma | ?*.lz )
		handle_output='mkdir'
		handle_skip_manually=path

		case "$archive_path" in
			*.bz )
				remove_suffix='.bz'
				run_unzip="bunzip2"
				run_cat="bzcat"
				;;
			*.bz2 )
				remove_suffix='.bz2'
				run_unzip="bunzip2"
				run_cat="bzcat"
				;;
			*.gz )
				remove_suffix='.gz'
				run_unzip="gunzip"
				run_cat="zcat"
				;;
			*.xz )
				remove_suffix='.xz'
				run_unzip="unxz"
				run_cat="xzcat"
				;;
			*.lzma )
				remove_suffix='.lzma'
				run_unzip="unlzma"
				run_cat="lzcat"
				;;
			*.lz )
				remove_suffix='.lz'
				run_unzip="lzip -d"
				run_cat="lzip -d --stdout"
				;;
		esac

		force_output_dir_to_current_dir

		if [ -n "$output_dir" ]; then
			handle_delete_manually=y
			handle_force=noclobber
			run="$run_cat DOUBLE_DASH_ARCHIVE_PATH > OUTPUT_PATH"
		else
			run="$run_unzip"
			[ -z "$delete" ] && run="$run --keep"
			[ -n "$force" ] && run="$run --force"
			run="$run DOUBLE_DASH_ARCHIVE_PATH"
		fi
		;;
	?*.zst )
		handle_skip_manually=path
		handle_output='mkdir'

		remove_suffix='.zst'
		run="unzstd"

		force_output_dir_to_current_dir

		[ -n "$quiet" ] && run="$run --quiet"
		[ -n "$delete" ] && run="$run --rm"
		[ -n "$force" ] && run="$run --force"
		[ -n "$output_dir" ] && run="$run --output-dir-flat=OUTPUT_DIR"

		run="$run DOUBLE_DASH_ARCHIVE_PATH"
		;;
	?*.lz4 )
		handle_skip_manually=path
		handle_output='mkdir'

		remove_suffix='.lz4'
		run="unlz4"

		force_output_dir_to_current_dir

		[ -n "$quiet" ] && run="$run --quiet"
		[ -n "$delete" ] && run="$run --rm"
		[ -n "$force" ] && run="$run --force"
		run="$run DOUBLE_DASH_ARCHIVE_PATH"
		[ -n "$output_dir" ] && run="$run DOT_OUTPUT_PATH"
		;;
	*.lrz )
		handle_skip_manually=path
		handle_output='mkdir'

		remove_suffix='.lrz'
		run="lrunzip"

		[ -n "$quiet" ] && run="$run --quiet"
		[ -n "$delete" ] && run="$run --delete"
		[ -n "$force" ] && run="$run --force"

		force_output_dir_to_current_dir
		if [ -n "$output_dir" ]; then
			run="$run --outdir OUTPUT_DIR"
		fi
		run="$run DOUBLE_DASH_ARCHIVE_PATH"
		;;
	?*.lzo )
		handle_output='mkdir'

		run="lzop -x"

		[ -n "$quiet" ] && run="$run --quiet"
		[ -n "$delete" ] && run="$run --delete"
		[ -n "$force" ] && run="$run --force"
		if [ -n "$skip" ]; then
			echo "Sorry, the --skip flag is not supported for lzop." >&2
			exit 1
		fi

		[ -n "$output_dir" ] && run="$run --path=OUTPUT_DIR"

		run="$run DOUBLE_DASH_ARCHIVE_PATH"
		;;
	*.arj )
		handle_delete_manually=y

		if [ -n "$quiet" ] || [ -n "$force" ] || [ -n "$skip" ] || [ -n "$output_dir" ]; then
			echo "Sorry, unarj does not support any flags." >&2
			exit 1
		fi

		run="unarj x ARCHIVE_PATH"
		;;
	*.lha )
		handle_delete_manually=y

		run="lha x"

		# Free lhasa does not support short opts
		[ -n "$quiet" ] && run="$run"q
		[ -n "$force" ] && run="$run"f
		if [ -n "$skip" ]; then
			echo "Sorry, the --skip flag is not supported for lha." >&2
		fi
		[ -n "$output_dir" ] && run="$run"'w=OUTPUT_DIR'

		# The non-free lha supports --
		run="$run DOT_ARCHIVE_PATH"
		;;
	*.cpio )
		# BUG?: GNU cpio creates output directory automatically, but writes nothing and crashes
		handle_delete_manually=y

		run="cpio -i"

		[ -n "$quiet" ] && run="$run -d --quiet" || run="$run -vd"
		[ -n "$force" ] && run="$run --unconditional"
		[ -n "$output_dir" ] && run="$run --directory=OUTPUT_DIR"
		
		run="$run < ARCHIVE_PATH"
		;;
	?*.Z )
		handle_skip_manually=path
		handle_output='mkdir'

		remove_suffix='.Z'
		run="uncompress"

		force_output_dir_to_current_dir

		# Let's be strictly POSIX-compliant in the case of .Z
		if [ -z "$delete" ] || [ -n "$output_dir" ]; then
			handle_delete_manually=y
			handle_force=noclobber
			run="uncompress -c DOT_ARCHIVE_PATH > OUTPUT_PATH"
		elif [ -n "$force" ]; then
			run="uncompress -f DOT_ARCHIVE_PATH"
		else
			run="uncompress DOT_ARCHIVE_PATH"
		fi
		;;
	* )
		case "$archive_path" in
			*.7z )
				# Using 7z is perfectly fine
				;;
			* )
				>&2 echo "Don't know the proper tool for $archive_path, let's just try 7z"
				;;
		esac

		handle_delete_manually=y

		run="7z x"

		[ -n "$force" ] && run="$run -aoa"
		[ -n "$skip" ] && run="$run -aos"
		[ -n "$output_dir" ] && run="$run -oOUTPUT_DIR"
		[ -n "$password" ] && run="$run -pPASSWORD"
		[ -n "$quiet" ] && run="$run -bd"

		run="$run DOUBLE_DASH_ARCHIVE_PATH"
		;;
esac

if [ "$handle_force" = 'always-skip' ] && [ -z "$force" ]; then
	skip=y
fi

# Manually check if file exists
if [ -n "$handle_skip_manually" ] && [ -n "$skip" ]; then
	case "$handle_skip_manually" in
		path )
			check_path="OUTPUT_PATH"
			;;
		dir )
			check_path="OUTPUT_DIR"
			;;
	esac
	# We still have to --delete even if we manually skip.
	# handle_delete_manually is handled later.
	if [ -n "$delete" ] && [ -z "$handle_delete_manually" ]; then
		run="([ -e $check_path ] && rm DOUBLE_DASH_ARCHIVE_PATH) || $run"
	else
		run="[ -e $check_path ] || $run"
	fi
	used_or=y
fi

# Manually remove archive on successful extraction
if [ -n "$handle_delete_manually" ] && [ -n "$delete" ]; then
	if [ -n "$used_or" ]; then
		run="($run) && rm DOUBLE_DASH_ARCHIVE_PATH"
	else
		run="$run && rm DOUBLE_DASH_ARCHIVE_PATH"
	fi
fi

# 'set -o noclobber' to prevent overwriting files by default
if [ "$handle_force" = 'noclobber' ] && [ -z "$force" ] && [ -z "$skip" ]; then
	run="$(printf 'set -o noclobber\n%s' "$run")"
fi

# Manually create output directory
if [ "$handle_output" = 'mkdir' ] && [ -n "$output_dir" ]; then
	run="$(printf 'mkdir -p DOUBLE_DASH_OUTPUT_DIR\n%s' "$run")"
fi


archive_path_arg="$(shell_quote "$archive_path")"
archive_path_arg="$(simplify_home "$archive_path_arg")"
output_dir_arg="$(shell_quote "$output_dir")"
output_dir_arg="$(simplify_home "$output_dir_arg")"
password_arg="$(shell_quote "$password")"

base_name_no_ext="$(basename -- "$archive_path" "$remove_suffix")"
case "$output_dir" in
	'' )
		output_path="$base_name_no_ext"
		;;
	*/ )
		output_path="$output_dir$base_name_no_ext"
		;;
	* )
		output_path="$output_dir/$base_name_no_ext"
		;;
esac


# Special handling for force_output_dir_to_current_dir
# Might not need the leading ./ at this point
case "$output_path" in
	./* )
		output_path="${output_path##./}"
		;;
esac

output_path_arg="$(shell_quote "$output_path")"
output_path_arg="$(simplify_home "$output_path_arg")"

case "$archive_path_arg" in
	-* )
		dot_archive_path_arg="./$archive_path_arg"
		double_dash_archive_path_prefix="-- "
		;;
	\'-* )
		dot_archive_path_arg="'./${archive_path_arg##\'}"
		double_dash_archive_path_prefix="-- "
		;;
	* )
		dot_archive_path_arg="$archive_path_arg"
		;;
esac

case "$output_path_arg" in
	-* )
		dot_output_path_arg="./$output_path_arg"
		;;
	\'-* )
		dot_output_path_arg="'./${output_path_arg##\'}"
		;;
	* )
		dot_output_path_arg="$output_path_arg"
		;;
esac

case "$output_dir_arg" in
	-* | \'-* )
		double_dash_output_dir_prefix="-- "
		;;
esac


awk_program='{
	gsub("DOT_ARCHIVE_PATH", dot_archive_path);
	gsub("DOUBLE_DASH_ARCHIVE_PATH", double_dash_archive_path);
	gsub("ARCHIVE_PATH", archive_path);
	gsub("DOUBLE_DASH_OUTPUT_DIR", double_dash_output_dir);
	gsub("OUTPUT_DIR", output_dir);
	gsub("DOT_OUTPUT_PATH", dot_output_path);
	gsub("OUTPUT_PATH", output_path);
	gsub("PASSWORD", password);
	print;
}'


# Pretty string starts as bright blue, then reset at the end
# Arguments in pretty string are green, then the following text is bright blue
# Password in pretty string is red

if [ -z "$only_print_command" ]; then
	printf "\033[38;5;12m%s\033[m" "$run" | >&2 awk \
		-v archive_path="\033[38;5;2m$archive_path_arg\033[38;5;12m" \
		-v dot_archive_path="\033[38;5;2m$dot_archive_path_arg\033[38;5;12m" \
		-v double_dash_archive_path="$double_dash_archive_path_prefix\033[38;5;2m$archive_path_arg\033[38;5;12m" \
		-v output_dir="\033[38;5;2m$output_dir_arg\033[38;5;12m" \
		-v double_dash_output_dir="$double_dash_output_dir_prefix\033[38;5;2m$output_dir_arg\033[38;5;12m" \
		-v output_path="\033[38;5;2m$output_path_arg\033[38;5;12m" \
		-v dot_output_path="\033[38;5;2m$dot_output_path_arg\033[38;5;12m" \
		-v password="\033[38;5;1mPLAINTEXT_PASSWORD\033[38;5;12m" \
		"$awk_program"
	>&2 echo
fi


run_command="$(printf '%s' "$run" | awk \
	-v archive_path="$archive_path_arg" \
	-v dot_archive_path="$dot_archive_path_arg" \
	-v double_dash_archive_path="$double_dash_archive_path_prefix$archive_path_arg" \
	-v output_dir="$output_dir_arg" \
	-v double_dash_output_dir="$double_dash_output_dir_prefix$output_dir_arg" \
	-v output_path="$output_path_arg" \
	-v dot_output_path="$dot_output_path_arg" \
	-v password="$password_arg" \
	"$awk_program")"

if [ -n "$only_print_command" ]; then
	echo "$run_command"
else
	( eval "$run_command" )
fi
