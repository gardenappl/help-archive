#!/bin/sh

set -o errexit


# Sanitize string so it's usable as an argument
shell_quote() {
	# Escape single quotes
	escaped=$(echo "$1" | sed "s/'/'\"'\"'/g")

	case "$escaped" in
		'' )
			# Empty string
			;;
		*[![:alnum:]_\./~-]* )
			# Argument is not clean, needs quoting
			echo "'$escaped'"
			;;
		* )
			# Argument contains only safe characters
			echo "$escaped"
			;;
	esac
}

simplify_home() {
	echo "$1" | awk -v home="$HOME" '{ sub("^"home, "~"); print }'
}


options=h1cS
longopts=help,oneline,command,simulate
parsed=$(getopt --options=$options --longoptions=$longopts --name "$0" -- "$@")
eval set -- "$parsed"


while true; do
	case "$1" in 
		-1 | --oneline )
			one_line=y
			shift
			;;
		-c | --command | -S | --simulate )
			only_print_command=y
			shift
			;;
		-- )
			shift
			archive_path="$1"
			break
			;;
	esac
done


# We will manually replace ARCHIVE_PATH, etc with the needed arguments
# (with or without color formatting)

case "$archive_path" in
	*.zip )
		# Info-ZIP does not recognize --
		archive_path_handle_dash=leading-dot
		if [ -n "$one_line" ]; then
			run="zipinfo -1 ARCHIVE_PATH"
		else
			run="zipinfo ARCHIVE_PATH"
		fi
		;;
	*.rar )
		archive_path_handle_dash=double-dash
		if [ -n "$one_line" ]; then
			run="unrar lb ARCHIVE_PATH"
		else
			run="unrar l ARCHIVE_PATH"
		fi
		;;
	*.tar.lrz )
		archive_path_handle_dash=double-dash
		run="lrzcat --quiet ARCHIVE_PATH"
		[ -n "$one_line" ] && run="$run | tar t" || run="$run | tar tv"
		;;
	*.tar | *.tar.* | *.tgz | *.tbz | *.txz | *.tlz | *.tzo )
		archive_path_handle_dash=leading-dot
		case "$archive_path" in
			*.tar.gz | *.tgz )
				[ -n "$one_line" ] && run="tar tzf" || run="tar tzvf"
				;;
			*.tar.bz | *.tbz )
				[ -n "$one_line" ] && run="tar tjf" || run="tar tjvf"
				;;
			* )
				[ -n "$one_line" ] && run="tar tf" || run="tar tvf"
				;;
		esac
		run="$run ARCHIVE_PATH"
		;;
	*.deb )
		archive_path_handle_dash=double-dash
		run="dpkg-deb --contents ARCHIVE_PATH"
		[ -n "$one_line" ] && run="$run | cut -c51- | tail -n +2"
		;;
	?*.bz2 | ?*.bz | ?*.gz | ?*.xz | ?*.lzma | ?*.lz | ?*.lz4 | ?*.lrz | ?*.zst | ?*.Z )
		dont_print_pretty=y
		if [ -n "$one_line" ]; then
			run="printf '%s\n' ARCHIVE_PATH | sed 's/\.[^.]*$//; s|[^/]*/||g'"
		else
			run="echo 'ARCHIVE_PATH is just a single compressed file.'"
		fi
		;;
	*.lzo )
		archive_path_handle_dash=double-dash
		must_cd=y
		if [ -n "$one_line" ]; then
			run="lzop --list --quiet -P ARCHIVE_PATH | cut -c40-"
		else
			run="lzop --ls -P ARCHIVE_PATH"
		fi
		;;
	*.lha )
		# The non-free lha supports --
		archive_path_handle_dash=leading-dot
		if [ -n "$one_line" ]; then
			# this might be a better way to handle this,
			# but only supported in non-free lha
			#run="lha l -vq ARCHIVE_PATH | sed '0~2d'"
			run="lha -lq ARCHIVE_PATH | cut -c52-"
		else
			run="lha -l ARCHIVE_PATH"
		fi
		;;
	*.cpio )
		if [ -n "$one_line" ]; then
			run="cpio -t --quiet < ARCHIVE_PATH"
		else
			run="cpio -t -v < ARCHIVE_PATH"
		fi
		;;
	*.arj )
		if [ -n "$one_line" ]; then
			echo "Sorry, the --oneline flag is not supported for ARJ." >&2
		fi
		run="unarj l ARCHIVE_PATH"
		;;
	* )
		case "$archive_path" in
			*.7z )
				# Using 7z is perfectly fine
				;;
			* )
				>&2 echo "Don't know the proper tool for $archive_path, let's just try 7z"
				;;
		esac

		archive_path_handle_dash='double-dash'
		if [ -n "$one_line" ]; then
			run="7z l -slt -ba ARCHIVE_PATH | grep '^Path = ' | cut -d' ' -f3-"
		else
			run="7z l ARCHIVE_PATH"
		fi
		;;
esac


archive_dir="$(dirname -- "$archive_path")"
if [ -n "$must_cd" ]; then
	archive_path="$(basename -- "$archive_path")"
	case "$archive_dir" in
		. )
			# Archive dir is current dir
			;;
		-* )
			# Handle dir starting with -
			run="$(printf 'cd -- ARCHIVE_DIR\n%s\ncd -' "$run" )"
			;;
		* )
			run="$(printf 'cd ARCHIVE_DIR\n%s\ncd -' "$run" )"
			;;
	esac
fi


case "$archive_path" in
	-* )
		if [ "$archive_path_handle_dash" = 'double-dash' ]; then
			archive_path_arg_prefix="-- "
		elif [ "$archive_path_handle_dash" = 'leading-dot' ]; then
			archive_path="./$archive_path"
		fi
		;;
	* )
		;;
esac


archive_path_arg="$(shell_quote "$archive_path")"
archive_path_arg="$(simplify_home "$archive_path_arg")"
archive_dir_arg="$(shell_quote "$archive_dir")"
archive_dir_arg="$(simplify_home "$archive_dir_arg")"


awk_program='{
	gsub("ARCHIVE_DIR", archive_dir);
	gsub("ARCHIVE_PATH", archive_path);
	print;
}'

if [ -z "$only_print_command" ] && [ -z "$dont_print_pretty" ]; then
	# Pretty string starts as bright blue, then reset at the end
	# Arguments in pretty string are green, then the following text is bright blue

	printf '\033[38;5;12m%s\033[m' "$run" | >&2 awk \
		-v archive_dir="\033[38;5;2m$archive_dir_arg\033[38;5;12m" \
		-v archive_path="$archive_path_arg_prefix\033[38;5;2m$archive_path_arg\033[38;5;12m" \
		"$awk_program"
	>&2 echo
fi


run_command="$(printf '%s' "$run" | awk \
	-v archive_dir="$archive_dir_arg" \
	-v archive_path="$archive_path_arg_prefix$archive_path_arg" \
	"$awk_program")"

if [ -n "$only_print_command" ]; then
	echo "$run_command"
else
	( eval "$run_command" )
fi
